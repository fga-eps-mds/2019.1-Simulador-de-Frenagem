/*
Generates a self contained binary application which reads data from
a serial connection (was developed thinking on ardu√≠no via USB)
and send it through network.

It is also able to send commands in ascii format. We are working
On a application which each ascii character represents a state
where some things are on and others off. In our case acelerator,
brake, etc.

We also provide a simple GUI through systray in which users can
interact with the application.
*/
package main

import (
	"encoding/json"
	"fmt"
	"log"
	"os"
	"os/signal"
	"path"
	"strconv"
	"strings"
	"sync"
	"time"

	emitter "github.com/emitter-io/go/v2"
	"github.com/getlantern/systray"
	"github.com/tarm/serial"
)

type Testing struct {
	Model  string `json:"model"`
	Pk     int    `json:"pk"`
	Fields struct {
		CreateBy    string `json:"create_by"`
		Calibration struct {
			Name      string `json:"name"`
			IsDefault bool   `json:"is_default"`
			Vibration struct {
				AcquisitionChanel int     `json:"acquisition_chanel"`
				ConversionFactor  float64 `json:"conversion_factor"`
				VibrationOffset   float64 `json:"vibration_offset"`
			} `json:"vibration"`
			Speed struct {
				AcquisitionChanel int     `json:"acquisition_chanel"`
				TireRadius        float64 `json:"tire_radius"`
			} `json:"speed"`
			Relations struct {
				TransversalSelectionWidth int `json:"transversal_selection_width"`
				HeigthWidthRelation       int `json:"heigth_width_relation"`
				RimDiameter               int `json:"rim_diameter"`
				SyncMotorRodation         int `json:"sync_motor_rodation"`
				SheaveMoveDiameter        int `json:"sheave_move_diameter"`
				SheaveMotorDiameter       int `json:"sheave_motor_diameter"`
			} `json:"relations"`
			Command struct {
				CommandChanelSpeed    int     `json:"command_chanel_speed"`
				ActualSpeed           float64 `json:"actual_speed"`
				MaxSpeed              float64 `json:"max_speed"`
				ChanelCommandPression int     `json:"chanel_command_pression"`
				ActualPression        float64 `json:"actual_pression"`
				MaxPression           float64 `json:"max_pression"`
			} `json:"command"`
			Temperature []struct {
				AcquisitionChanel int     `json:"acquisition_chanel"`
				ConversionFactor  float64 `json:"conversion_factor"`
				TemperatureOffset float64 `json:"temperature_offset"`
				Calibration       int     `json:"calibration"`
			} `json:"temperature"`
			Force []struct {
				AcquisitionChanel int     `json:"acquisition_chanel"`
				ConversionFactor  float64 `json:"conversion_factor"`
				ForceOffset       float64 `json:"force_offset"`
				Calibration       int     `json:"calibration"`
			} `json:"force"`
		} `json:"calibration"`
		Configuration struct {
			Name              string  `json:"name"`
			IsDefault         bool    `json:"is_default"`
			Number            int     `json:"number"`
			TimeBetweenCycles int     `json:"time_between_cycles"`
			UpperLimit        int     `json:"upper_limit"`
			InferiorLimit     int     `json:"inferior_limit"`
			UpperTime         int     `json:"upper_time"`
			InferiorTime      int     `json:"inferior_time"`
			DisableShutdown   bool    `json:"disable_shutdown"`
			EnableOutput      bool    `json:"enable_output"`
			Temperature       float64 `json:"temperature"`
			Time              float64 `json:"time"`
		} `json:"configuration"`
	} `json:"fields"`
}

// General application constants
const (
	logFilePath           = "unbrake.log"
	applicationFolderName = "UnBrake"
)

// Serial constants
const (
	bufferSize       = 48
	simulatorPortEnv = "SERIAL_PORT"
	baudRate         = 115200
	frequencyReading = 10
	numSerialAttrs   = 11 // number of attributes read simultaneously from serial device

)

// MQTT constants
const (
	mqttHostEnv       = "MQTT_HOST"
	mqttDefaultHost   = "unbrake.ml"
	mqttDefaultPort   = "8080"
	mqttPortEnv       = "MQTT_PORT"
	mqttChannelPrefix = "unbrake/galpao"
	mqttKeyEnv        = "MQTT_KEY"
)

// Channels for controlling execution
var wg sync.WaitGroup
var stopCollectingDataCh chan bool
var sigsCh chan os.Signal
var serialPortNameCh = make(chan string, 1)
var serialPortCh = make(chan *serial.Port, 3)
var testingCh = make(chan string)
var upperSpeedLimit = 150
var lowerSpeedLimit = 150
var timeSleepWater = 3.0
var timeCooldown = 3
var temperatureLimit = 400.0
var delayAcelerateToBrake = 2
var totalOfSnubs int

// Flags with intermediary states
var stabilizing = false
var throwingWater = false

// Global snub which represents state of running test
var snub = Snub{state: acelerate}

// Possible states of a snub, value is ascii which
// represents its state
const (
	cooldown            = string(iota + '$') //'$'
	acelerate                                //'%'
	brake                                    //'&'
	acelerateBrake                           //'''
	cooldownWater                            //'('
	acelerateWater                           //')'
	brakeWater                               //'*'
	acelerateBrakeWater                      //'+'
)

// Mapping current state to next state
var currentToNextState = map[string]string{
	acelerate:      brake,
	brake:          cooldown,
	cooldown:       acelerate,
	acelerateWater: brakeWater,
	brakeWater:     cooldownWater,
	cooldownWater:  acelerateWater,
}

// Regular state to matching state but throwing water
var offToOnWater = map[string]string{
	acelerate:      acelerateWater,
	brake:          brakeWater,
	cooldown:       cooldownWater,
	acelerateWater: acelerateWater,
	brakeWater:     brakeWater,
	cooldownWater:  cooldownWater,
}

// From a throwing water state to a regular state
var onToOffWater = map[string]string{
	acelerateWater: acelerate,
	brakeWater:     brake,
	cooldownWater:  cooldown,
	acelerate:      acelerate,
	brake:          brake,
	cooldown:       cooldown,
}

// Ascii character which represents state to state name
var byteToStateName = map[string]string{
	"$":  "cooldown",
	"%":  "acelerate",
	"&":  "brake",
	"\"": "acelerateBrake",
	"(":  "cooldownWater",
	")":  "acelerateWater",
	"*":  "brakeWater",
	"+":  "acelerateBrakeWater",
}

var serialAttrs = make([]SerialAttribute, numSerialAttrs)

// Index of information get on reading from serial
const (
	frequencyIdx = iota
	temperature1Idx
	temperature2Idx
	brakingForce1Idx
	brakingForce2Idx
	vibrationIdx
	speedIdx
	pressureIdx
)

// Subchannels for each information sent to MQTT, same index rules
// as the original data string from serial
var mqttSubchannels = []string{
	"/frequency",
	"/temperature/sensor1",
	"/temperature/sensor2",
	"/brakingForce/sensor1",
	"/brakingForce/sensor2",
	"/vibration",
	"/speed",
	"/pressure",
}

// SerialAttribute represent one attributes of the many that are returned as values
// from the physical device on serial communication
type SerialAttribute struct {
	mqttSubchannel string      // Subchannel associated at mqtt broker
	publishCh      chan string // for publishing
	handleCh       chan int    // for handling values
}

// Snub is a cycle of aceleration, braking and cooldown,
// multiple snubs compose a test
type Snub struct {
	state string
	mux   sync.Mutex
}

const checkedPrefix = "\u2713 "

// Represents the systray menu item of a serial port
// to be used
type serialPortGUI struct {
	item  *systray.MenuItem
	title string
}

func main() {
	logFile := getLogFile()
	defer logFile.Close()

	log.Println("--------------------------------------------")
	log.Println("Initializing application...")

	sigsCh = make(chan os.Signal, 1)
	signal.Notify(sigsCh, os.Interrupt)

	for i, subChannel := range mqttSubchannels {
		serialAttrs[i].mqttSubchannel = subChannel
		serialAttrs[i].publishCh = make(chan string)
		serialAttrs[i].handleCh = make(chan int)
	}

	onExit := func() {
		snub.state = cooldown
		log.Println("Exiting...")
	}
	systray.Run(onReady, onExit)

	log.Println("Application finished!")
	log.Println("--------------------------------------------")
}

// Required by systray (GUI)
func onReady() {
	systray.SetIcon(icon)
	systray.SetTitle("UnBrake")
	systray.SetTooltip("UnBrake")

	handlePortsSectionGUI()

	mQuitOrig := systray.AddMenuItem("Sair", "Fechar UnBrake")

	stopCollectingDataCh = make(chan bool, 1)

	// Wait for quitting
	go func() {
		select {
		case <-mQuitOrig.ClickedCh:
			log.Println("Quitting request by interface")
		case <-sigsCh:
			log.Println("Quitting request by signal")
		}

		stopCollectingDataCh <- true
		systray.Quit()
		log.Println("Finished systray")
	}()

	wg.Add(1)
	go collectData()
	go handleSnubState()
	go handleTestingReceiving()

	if _, collectEnv := os.LookupEnv(mqttKeyEnv); collectEnv {
		go publishAll()
	} else {
		log.Println("MQTT key not set!!! Data will not be published...")
	}

	wg.Wait()
}

// Handle receiving of tests to be executed
func handleTestingReceiving() {
	if key, doesExists := os.LookupEnv(mqttKeyEnv); doesExists {
		client, _ := emitter.Connect(getMqttHost(), func(_ *emitter.Client, msg emitter.Message) {
			log.Printf("Sent message: '%s' topic: '%s'\n", msg.Payload(), msg.Topic())
		})

		// Wait for tests
		const channel = mqttChannelPrefix + "/testing"
		go func() {
			for {
				client.Subscribe(key, channel, func(_ *emitter.Client, msg emitter.Message) {
					testingCh <- string(msg.Payload())
				})
				time.Sleep(time.Second)
			}
		}()

		testing := <-testingCh

		var data Testing

		err := json.Unmarshal([]byte(testing), &data)

		if err != nil {
			log.Println("Wasn't possible to decode JSON, error: ", err)
		}

		totalOfSnubs = data.Fields.Configuration.Number
		upperSpeedLimit = data.Fields.Configuration.UpperLimit
		lowerSpeedLimit = data.Fields.Configuration.InferiorLimit
		timeSleepWater = data.Fields.Configuration.Time
		delayAcelerateToBrake = data.Fields.Configuration.UpperTime
		timeCooldown = data.Fields.Configuration.InferiorTime
		temperatureLimit = data.Fields.Configuration.Temperature

		fmt.Printf("totalOfSnubs: %v\n", totalOfSnubs)
		fmt.Printf("upperSpeedLimit: %v\n", upperSpeedLimit)
		fmt.Printf("lowerSpeedLimit: %v\n", lowerSpeedLimit)
		fmt.Printf("timeSleepWater: %v\n", timeSleepWater)
		fmt.Printf("delayAcelerateToBrake: %v\n", delayAcelerateToBrake)
		fmt.Printf("timeCooldown: %v\n", timeCooldown)
		fmt.Printf("temperatureLimit: %v\n", temperatureLimit)

	} else {
		log.Println("MQTT key not set!!! Not waiting for tests to arrive...")
	}
}

// Controls the serial ports selection via GUI
func handlePortsSectionGUI() {
	systray.AddSeparator()
	portsTitle := systray.AddMenuItem("Portas", "Selecione a porta de leitura")
	portsTitle.Disable()

	systray.AddSeparator()

	// Get available ports
	portsNames := getSerialPorts()

	// Add environment variable serial port if not already exists
	found, envSerialPort := false, getEnvVariableSerialPort()
	for i := range portsNames {
		if portsNames[i] == envSerialPort {
			found = true
			break
		}
	}
	if !found && envSerialPort != "" {
		portsNames = append(portsNames, envSerialPort)
	}

	// Create ports
	ports := make([]serialPortGUI, len(portsNames))
	for i, portName := range portsNames {
		ports[i] = createPort(portName, "Select port")
	}

	systray.AddSeparator()

	handleSelect := func(selected int, ports []serialPortGUI) {
		for i := range ports {
			if i != selected {
				ports[i].uncheck()
			}
		}

		ports[selected].uncheck()
		serialPortNameCh <- ports[selected].title
		ports[selected].check()
	}

	// Handle serial ports checking/unchecking
	for i, port := range ports {
		go func(selected int, portLocal serialPortGUI) {
			for {
				<-portLocal.item.ClickedCh
				handleSelect(selected, ports)
			}
		}(i, port)
	}
}

// Creates a Serial on systray
func createPort(title, tooltip string) serialPortGUI {
	var port serialPortGUI

	port.title = title
	port.item = systray.AddMenuItem(title, tooltip)

	return port
}

// Set the title of a serial on GUI
func (port *serialPortGUI) setTitle(title string) {
	port.title = title
	port.item.SetTitle(title)
}

// Check port menu item based on current state
func (port *serialPortGUI) check() {
	if !port.item.Checked() {
		port.setTitle(checkedPrefix + port.title)
		port.item.Check()
	}
}

// Uncheck port menu item based on current state
func (port *serialPortGUI) uncheck() {
	if port.item.Checked() {
		port.setTitle(port.title[len(checkedPrefix):])

		port.item.Uncheck()
	}
}

// Will update current state to its next, respecting timing and
// critical regions
func (snub *Snub) handleAcelerate() {
	stabilizing = true
	log.Printf("Stabilizing...\n")
	time.Sleep(time.Second * time.Duration(delayAcelerateToBrake))

	snub.mux.Lock()
	defer snub.mux.Unlock()

	oldState := snub.state
	snub.state = currentToNextState[snub.state]
	log.Printf("Change state: %v ---> %v\n", byteToStateName[oldState], byteToStateName[snub.state])
	stabilizing = false

}

// Will change from a regular state to a state with same
// effects but throwing water
func (snub *Snub) turnOnWater(port *serial.Port) {
	snub.mux.Lock()

	oldState := snub.state
	snub.state = offToOnWater[snub.state]
	throwingWater = true
	_, err := port.Write([]byte(snub.state))
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Turn on water(%vs): %v ---> %v\n", timeSleepWater, byteToStateName[oldState], byteToStateName[snub.state])

	snub.mux.Unlock()

	time.Sleep(time.Second * time.Duration(timeSleepWater))

	snub.mux.Lock()

	oldState = snub.state
	snub.state = onToOffWater[snub.state]
	_, err = port.Write([]byte(snub.state))
	if err != nil {
		log.Fatal(err)
	}
	throwingWater = false
	log.Printf("Turn off water: %v ---> %v\n", byteToStateName[oldState], byteToStateName[snub.state])

	snub.mux.Unlock()
}

// Handle changing state from braking to cooldown, waiting the
// cooldown and gettting back to acelerating
func (snub *Snub) handleBrake(port *serial.Port) {
	snub.mux.Lock()

	oldState := snub.state
	snub.state = currentToNextState[snub.state]
	_, err := port.Write([]byte(snub.state))
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Change state: %v ---> %v\n", byteToStateName[oldState], byteToStateName[snub.state])

	snub.mux.Unlock()

	time.Sleep(time.Second * time.Duration(timeCooldown))

	snub.mux.Lock()

	oldState = snub.state
	snub.state = currentToNextState[snub.state]
	_, err = port.Write([]byte(snub.state))
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Change state: %v ---> %v\n", byteToStateName[oldState], byteToStateName[snub.state])

	snub.mux.Unlock()
}

// Will collect data from serial bus and distributes it
// to others goroutines
func collectData() {
	defer wg.Done()

	const ReadingDelay = time.Second / frequencyReading

	continueCollecting := true
	for continueCollecting {
		log.Println("Waiting for valid serial port selection...")
		serialPortName := <-serialPortNameCh

		configuration := &serial.Config{
			Name:        serialPortName,
			Baud:        baudRate,
			ReadTimeout: time.Second,
		}

		port, err := serial.OpenPort(configuration)
		if err == nil {
			serialPortCh <- port
		} else {
			log.Println(err)
			continue
		}

		log.Println("Initializing collectData routine...")
		log.Printf("Simulator Port = %s", serialPortName)
		log.Printf("Buffer size = %d", bufferSize)
		log.Printf("Baud rate = %d", baudRate)
		log.Printf("Reading delay = %v", ReadingDelay)

		port.Flush()
		for {
			select {
			case stop := <-stopCollectingDataCh:
				if stop {
					_, err := port.Write([]byte(cooldown))
					if err != nil {
						log.Fatal(err)
					}
					continueCollecting = false
				}
			case sig := <-sigsCh:
				log.Println("Signal received: ", sig)
				_, err := port.Write([]byte(cooldown))
				if err != nil {
					log.Fatal(err)
				}
				continueCollecting = false
			case serialPortName = <-serialPortNameCh:
				serialPortNameCh <- serialPortName
				collectData()
			default:
				getData(port, "\"")
				time.Sleep(ReadingDelay)
			}
		}
	}
}

// Will get the data from the bus and returns it as an
// array of bytes
func getData(port *serial.Port, command string) []byte {
	n, err := port.Write([]byte(command))
	if err != nil {
		log.Println("Error writing to serial ", err, ". Is this the right port?")
	}

	buf := make([]byte, bufferSize)
	if n, err = port.Read(buf); err != nil {
		log.Println("Error reading from serial ", err, ". Is this the right port?")
	} else if n == 0 {
		log.Println("Error reading from serial: timeout waiting for bytes. Is this the right port?")
	}

	log.Printf("%s\n", strings.TrimSpace(string(buf[:n])))
	split := strings.Split(string(buf[:n]), ",")

	if len(split) == numSerialAttrs { // Was a complete read
		for i, attr := range split {
			attrInt, _ := strconv.Atoi(attr)

			select {
			case serialAttrs[i].handleCh <- attrInt:
			default:
			}

			select {
			case serialAttrs[i].publishCh <- attr:
			default:
			}
		}
	}

	return buf
}

// Publish to MQTT broker the whole current state of local application
func publishAll() {
	for i := 0; i < numSerialAttrs; i++ {
		go func(idx int) {
			for {
				publishData(<-serialAttrs[idx].publishCh, serialAttrs[idx].mqttSubchannel)
			}
		}(i)
	}
}

// Publish data to MQTT broker
func publishData(data string, subChannel string) {
	if key, doesExists := os.LookupEnv(mqttKeyEnv); doesExists {
		channel, data := mqttChannelPrefix+subChannel, data

		client, _ := emitter.Connect(getMqttHost(), func(_ *emitter.Client, msg emitter.Message) {
			log.Printf("Sent message: '%s' topic: '%s'\n", msg.Payload(), msg.Topic())
		})

		client.Publish(key, channel, data)
	} else {
		log.Println("MQTT key not set!!! Not publishing any data...")
	}
}

// Get complete host name with port of the MQTT broker
func getMqttHost() string {
	host, doesExists := os.LookupEnv(mqttHostEnv)
	if !doesExists {
		host = mqttDefaultHost
	}

	port, doesExists := os.LookupEnv(mqttPortEnv)
	if !doesExists {
		port = mqttDefaultPort
	}

	return "tcp://" + host + ":" + port
}

// Will manage the state of running snub, handling all state transitions,
// synchronization, collecting needed data and writing needed commands
func handleSnubState() {
	port := <-serialPortCh

	for {
		select {
		case port = <-serialPortCh:
		default:
		}

		select {

		case speed := <-serialAttrs[speedIdx].handleCh:
			if (snub.state == acelerate || snub.state == acelerateWater) && !stabilizing {
				if speed >= upperSpeedLimit {
					go snub.handleAcelerate()
					_, err := port.Write([]byte(snub.state))
					if err != nil {
						log.Fatal(err)
					}
				}
			}

			if snub.state == brake || snub.state == brakeWater {
				if speed < lowerSpeedLimit {
					go snub.handleBrake(port)
				}
			}

		case temperature1 := <-serialAttrs[temperature1Idx].handleCh:
			temperature2 := <-serialAttrs[temperature2Idx].handleCh

			if (temperature1 > int(temperatureLimit) || temperature2 > int(temperatureLimit)) && !throwingWater {
				if snub.state == acelerate || snub.state == brake || snub.state == cooldown {
					go snub.turnOnWater(port)
				}
			}
		}
	}
}

// Based on current OS will create application folder
// and log file (if not exists). Returns the log file
// as a File object
func getLogFile() *os.File {
	logPath := getLogPath()

	os.MkdirAll(logPath, os.ModePerm)
	logPath = path.Join(logPath, logFilePath)

	logFile, err := os.OpenFile(logPath, os.O_SYNC|os.O_WRONLY|os.O_CREATE|os.O_APPEND, 0666)
	if err != nil {
		log.Fatalf("error opening file: %v", err)
	}
	log.SetFlags(log.Ldate | log.Ltime | log.Lmicroseconds)
	log.SetOutput(logFile)

	return logFile
}

// Get serial port that will be used to communicate with the physical device
func getEnvVariableSerialPort() string {
	simulatorPort, doesExists := os.LookupEnv(simulatorPortEnv)

	if !doesExists {
		simulatorPort = ""
	}

	return simulatorPort
}

// Icon used on systray, how the application will appear on notification area
var icon = []byte{
	0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x20, 0x20, 0x00, 0x00, 0x01, 0x00,
	0x20, 0x00, 0xa8, 0x10, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x28, 0x00,
	0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x01, 0x00,
	0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xec, 0xe7, 0xdd, 0x00, 0xf0, 0xeb,
	0xe1, 0x06, 0xf0, 0xeb, 0xe1, 0x21, 0xf0, 0xeb, 0xe1, 0x5f, 0xf0, 0xeb,
	0xe1, 0x9c, 0xf0, 0xeb, 0xe1, 0xcc, 0xf0, 0xeb, 0xe1, 0xec, 0xee, 0xe9,
	0xdc, 0xfa, 0xe7, 0xe2, 0xce, 0xf7, 0xe6, 0xe1, 0xcd, 0xe1, 0xe6, 0xe1,
	0xcd, 0xba, 0xe6, 0xe1, 0xcd, 0x83, 0xe6, 0xe1, 0xcd, 0x42, 0xe6, 0xe1,
	0xcd, 0x11, 0xe6, 0xe1, 0xcd, 0x02, 0x11, 0x10, 0x0e, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc5, 0xc1, 0xb9, 0x00, 0xf0, 0xeb,
	0xe1, 0x04, 0xf0, 0xeb, 0xe1, 0x2e, 0xf0, 0xeb, 0xe1, 0x8f, 0xf0, 0xeb,
	0xe1, 0xdd, 0xf0, 0xeb, 0xe1, 0xf8, 0xf0, 0xeb, 0xe1, 0xfe, 0xf0, 0xeb,
	0xe1, 0xff, 0xf0, 0xeb, 0xe1, 0xff, 0xee, 0xe9, 0xdc, 0xff, 0xe7, 0xe2,
	0xce, 0xff, 0xe6, 0xe1, 0xcd, 0xff, 0xe6, 0xe1, 0xcd, 0xff, 0xe6, 0xe1,
	0xcd, 0xfd, 0xe6, 0xe1, 0xcd, 0xf1, 0xe6, 0xe1, 0xcd, 0xc2, 0xe6, 0xe1,
	0xcd, 0x62, 0xe6, 0xe1, 0xcd, 0x13, 0xe5, 0xe0, 0xcd, 0x01, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xee, 0xe9,
	0xdf, 0x00, 0xf0, 0xeb, 0xe1, 0x10, 0xf0, 0xeb, 0xe1, 0x72, 0xf0, 0xeb,
	0xe1, 0xdf, 0xf0, 0xeb, 0xe1, 0xfd, 0xf0, 0xeb, 0xe1, 0xff, 0xf0, 0xeb,
	0xe1, 0xff, 0xf0, 0xeb, 0xe1, 0xff, 0xf0, 0xeb, 0xe1, 0xff, 0xf0, 0xeb,
	0xe1, 0xff, 0xee, 0xe9, 0xdc, 0xff, 0xe7, 0xe2, 0xce, 0xff, 0xe6, 0xe1,
	0xcd, 0xff, 0xe6, 0xe1, 0xcd, 0xff, 0xe6, 0xe1, 0xcd, 0xff, 0xe6, 0xe1,
	0xcd, 0xff, 0xe6, 0xe1, 0xcd, 0xff, 0xe6, 0xe1, 0xcd, 0xf6, 0xe6, 0xe1,
	0xcd, 0xb8, 0xe6, 0xe1, 0xcd, 0x3c, 0xe6, 0xe1, 0xce, 0x04, 0x10, 0x10,
	0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0xef, 0xea, 0xe0, 0x00, 0xf0, 0xeb, 0xe1, 0x1d, 0xf0, 0xeb,
	0xe1, 0xa2, 0xf0, 0xeb, 0xe1, 0xf6, 0xf0, 0xeb, 0xe1, 0xff, 0xf0, 0xeb,
	0xe1, 0xff, 0xf0, 0xeb, 0xe1, 0xff, 0xf0, 0xeb, 0xe1, 0xff, 0xf0, 0xeb,
	0xe1, 0xff, 0xf0, 0xeb, 0xe1, 0xff, 0xf0, 0xeb, 0xe1, 0xff, 0xee, 0xe9,
	0xdc, 0xff, 0xe7, 0xe2, 0xce, 0xff, 0xe6, 0xe1, 0xcd, 0xff, 0xe6, 0xe1,
	0xcd, 0xff, 0xe6, 0xe1, 0xcd, 0xff, 0xe6, 0xe1, 0xcd, 0xff, 0xe6, 0xe1,
	0xcd, 0xff, 0xe6, 0xe1, 0xcd, 0xff, 0xe6, 0xe1, 0xcd, 0xfe, 0xe6, 0xe1,
	0xcd, 0xe1, 0xe6, 0xe1, 0xcd, 0x5f, 0xe6, 0xe1, 0xcd, 0x07, 0x11, 0x10,
	0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xee, 0xe9, 0xdf, 0x00, 0xf0, 0xeb,
	0xe1, 0x1d, 0xf0, 0xeb, 0xe1, 0xb2, 0xf0, 0xeb, 0xe1, 0xfb, 0xf0, 0xeb,
	0xe1, 0xff, 0xf0, 0xeb, 0xe1, 0xff, 0xf0, 0xeb, 0xe1, 0xff, 0xf0, 0xeb,
	0xe1, 0xff, 0xf0, 0xeb, 0xe1, 0xff, 0xf0, 0xeb, 0xe1, 0xff, 0xf0, 0xeb,
	0xe1, 0xff, 0xf0, 0xeb, 0xe1, 0xff, 0xee, 0xe9, 0xdc, 0xff, 0xe7, 0xe2,
	0xce, 0xff, 0xe6, 0xe1, 0xcd, 0xff, 0xe6, 0xe1, 0xcd, 0xff, 0xe6, 0xe1,
	0xcd, 0xff, 0xe6, 0xe1, 0xcd, 0xff, 0xe6, 0xe1, 0xcd, 0xff, 0xe6, 0xe1,
	0xcd, 0xff, 0xe6, 0xe1, 0xcd, 0xff, 0xe6, 0xe1, 0xcd, 0xff, 0xe6, 0xe1,
	0xcd, 0xed, 0xe6, 0xe1, 0xcd, 0x68, 0xe6, 0xe1, 0xcd, 0x06, 0x0b, 0x0a,
	0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc5, 0xc1,
	0xb9, 0x00, 0xf0, 0xeb, 0xe1, 0x10, 0xf0, 0xeb, 0xe1, 0xa3, 0xf0, 0xeb,
	0xe1, 0xfb, 0xf0, 0xeb, 0xe1, 0xff, 0xf0, 0xeb, 0xe1, 0xff, 0xf0, 0xeb,
	0xe1, 0xff, 0xf0, 0xeb, 0xe1, 0xff, 0xf0, 0xeb, 0xe1, 0xff, 0xf0, 0xeb,
	0xe1, 0xff, 0xf0, 0xeb, 0xe1, 0xff, 0xf0, 0xeb, 0xe1, 0xff, 0xf0, 0xeb,
	0xe1, 0xff, 0xee, 0xe9, 0xdc, 0xff, 0xe7, 0xe2, 0xce, 0xff, 0xe6, 0xe1,
	0xcd, 0xff, 0xe6, 0xe1, 0xcd, 0xff, 0xe6, 0xe1, 0xcd, 0xff, 0xe6, 0xe1,
	0xcd, 0xff, 0xe6, 0xe1, 0xcd, 0xff, 0xe6, 0xe1, 0xcd, 0xff, 0xe6, 0xe1,
	0xcd, 0xff, 0xe6, 0xe1, 0xcd, 0xff, 0xe6, 0xe1, 0xcd, 0xff, 0xe6, 0xe1,
	0xcd, 0xea, 0xe6, 0xe1, 0xcd, 0x53, 0xe6, 0xe1, 0xcd, 0x02, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xeb, 0xe1, 0x04, 0xf0, 0xeb,
	0xe1, 0x73, 0xf0, 0xeb, 0xe1, 0xf7, 0xf0, 0xeb, 0xe1, 0xff, 0xf0, 0xeb,
	0xe1, 0xff, 0xf0, 0xeb, 0xe1, 0xff, 0xf0, 0xeb, 0xe1, 0xff, 0xf0, 0xeb,
	0xe1, 0xff, 0xf0, 0xeb, 0xe1, 0xff, 0xf0, 0xeb, 0xe1, 0xff, 0xf0, 0xeb,
	0xe1, 0xff, 0xf0, 0xeb, 0xe1, 0xff, 0xf0, 0xeb, 0xe1, 0xff, 0xee, 0xe9,
	0xdc, 0xff, 0xe7, 0xe2, 0xce, 0xff, 0xe6, 0xe1, 0xcd, 0xff, 0xe6, 0xe1,
	0xcd, 0xff, 0xe6, 0xe1, 0xcd, 0xff, 0xe6, 0xe1, 0xcd, 0xff, 0xe6, 0xe1,
	0xcd, 0xff, 0xe6, 0xe1, 0xcd, 0xff, 0xe6, 0xe1, 0xcd, 0xff, 0xe6, 0xe1,
	0xcd, 0xff, 0xe6, 0xe1, 0xcd, 0xff, 0xe6, 0xe1, 0xcd, 0xff, 0xe6, 0xe1,
	0xcd, 0xd5, 0xe6, 0xe1, 0xcd, 0x29, 0xe3, 0xde, 0xcc, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xed, 0xe8,
	0xde, 0x00, 0xf0, 0xeb, 0xe1, 0x2f, 0xf0, 0xeb, 0xe1, 0xe0, 0xf0, 0xeb,
	0xe1, 0xff, 0xf0, 0xeb, 0xe1, 0xff, 0xf0, 0xeb, 0xe1, 0xff, 0xf0, 0xeb,
	0xe1, 0xff, 0xf0, 0xeb, 0xe1, 0xff, 0xf0, 0xeb, 0xe1, 0xff, 0xf0, 0xeb,
	0xe1, 0xff, 0xf0, 0xeb, 0xe1, 0xff, 0xf0, 0xea, 0xe0, 0xff, 0xec, 0xe6,
	0xdb, 0xff, 0xe4, 0xdd, 0xd1, 0xff, 0xd9, 0xd2, 0xc2, 0xff, 0xd3, 0xcd,
	0xb8, 0xff, 0xdd, 0xd7, 0xc3, 0xff, 0xe4, 0xde, 0xca, 0xff, 0xe6, 0xe1,
	0xcd, 0xff, 0xe6, 0xe1, 0xcd, 0xff, 0xe6, 0xe1, 0xcd, 0xff, 0xe6, 0xe1,
	0xcd, 0xff, 0xe6, 0xe1, 0xcd, 0xff, 0xe6, 0xe1, 0xcd, 0xff, 0xe6, 0xe1,
	0xcd, 0xff, 0xe6, 0xe1, 0xcd, 0xff, 0xe6, 0xe1, 0xcd, 0xfd, 0xe6, 0xe1,
	0xcd, 0x98, 0xe6, 0xe1, 0xcd, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xeb, 0xe1, 0x06, 0xf0, 0xeb,
	0xe1, 0x91, 0xf0, 0xeb, 0xe1, 0xfd, 0xf0, 0xeb, 0xe1, 0xff, 0xf0, 0xeb,
	0xe1, 0xff, 0xf0, 0xeb, 0xe1, 0xff, 0xf0, 0xeb, 0xe1, 0xff, 0xf0, 0xeb,
	0xe1, 0xff, 0xf0, 0xeb, 0xe1, 0xff, 0xf0, 0xeb, 0xe1, 0xff, 0xeb, 0xe5,
	0xda, 0xff, 0xce, 0xc4, 0xb3, 0xff, 0xa5, 0x95, 0x77, 0xff, 0x8c, 0x75,
	0x47, 0xff, 0x80, 0x69, 0x38, 0xff, 0x6e, 0x5d, 0x36, 0xff, 0x7d, 0x6e,
	0x4f, 0xff, 0xa6, 0x9c, 0x85, 0xff, 0xd2, 0xcc, 0xb7, 0xff, 0xe5, 0xe0,
	0xcb, 0xff, 0xe6, 0xe1, 0xcd, 0xff, 0xe6, 0xe1, 0xcd, 0xff, 0xe6, 0xe1,
	0xcd, 0xff, 0xe6, 0xe1, 0xcd, 0xff, 0xe6, 0xe1, 0xcd, 0xff, 0xe6, 0xe1,
	0xcd, 0xff, 0xe6, 0xe1, 0xcd, 0xff, 0xe6, 0xe1, 0xcd, 0xea, 0xe6, 0xe1,
	0xcd, 0x39, 0xe4, 0xdf, 0xcb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0xf0, 0xeb, 0xe1, 0x23, 0xf0, 0xeb, 0xe1, 0xdf, 0xf0, 0xeb,
	0xe1, 0xff, 0xf0, 0xeb, 0xe1, 0xff, 0xf0, 0xeb, 0xe1, 0xff, 0xf0, 0xeb,
	0xe1, 0xff, 0xf0, 0xeb, 0xe1, 0xff, 0xf0, 0xeb, 0xe1, 0xff, 0xf0, 0xeb,
	0xe1, 0xff, 0xe7, 0xe0, 0xd5, 0xff, 0xb1, 0xa3, 0x8a, 0xff, 0x84, 0x6a,
	0x2e, 0xff, 0x7d, 0x60, 0x0a, 0xff, 0x7d, 0x60, 0x09, 0xff, 0x75, 0x5a,
	0x08, 0xff, 0x60, 0x49, 0x07, 0xff, 0x5e, 0x48, 0x07, 0xff, 0x5f, 0x4a,
	0x0f, 0xff, 0x79, 0x69, 0x4a, 0xff, 0xc0, 0xb9, 0xa3, 0xff, 0xe4, 0xdf,
	0xcb, 0xff, 0xe6, 0xe1, 0xcd, 0xff, 0xe6, 0xe1, 0xcd, 0xff, 0xe6, 0xe1,
	0xcd, 0xff, 0xe6, 0xe1, 0xcd, 0xff, 0xe6, 0xe1, 0xcd, 0xff, 0xe6, 0xe1,
	0xcd, 0xff, 0xe6, 0xe1, 0xcd, 0xfd, 0xe6, 0xe1, 0xcd, 0x8e, 0xe6, 0xe1,
	0xcd, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xeb,
	0xe1, 0x62, 0xf0, 0xeb, 0xe1, 0xf8, 0xf0, 0xeb, 0xe1, 0xff, 0xf0, 0xeb,
	0xe1, 0xff, 0xf0, 0xeb, 0xe1, 0xff, 0xf0, 0xeb, 0xe1, 0xff, 0xf0, 0xeb,
	0xe1, 0xff, 0xf0, 0xeb, 0xe1, 0xff, 0xeb, 0xe5, 0xda, 0xff, 0xb0, 0xa2,
	0x8a, 0xff, 0x80, 0x64, 0x1c, 0xff, 0x7d, 0x60, 0x09, 0xff, 0x7d, 0x60,
	0x09, 0xff, 0x7d, 0x60, 0x09, 0xff, 0x75, 0x5a, 0x08, 0xff, 0x60, 0x49,
	0x07, 0xff, 0x5e, 0x48, 0x07, 0xff, 0x5e, 0x48, 0x07, 0xff, 0x5e, 0x48,
	0x08, 0xff, 0x71, 0x60, 0x3d, 0xff, 0xc6, 0xbf, 0xaa, 0xff, 0xe5, 0xe0,
	0xcc, 0xff, 0xe6, 0xe1, 0xcd, 0xff, 0xe6, 0xe1, 0xcd, 0xff, 0xe6, 0xe1,
	0xcd, 0xff, 0xe6, 0xe1, 0xcd, 0xff, 0xe6, 0xe1, 0xcd, 0xff, 0xe6, 0xe1,
	0xcd, 0xff, 0xe6, 0xe1, 0xcd, 0xd3, 0xe6, 0xe1, 0xcd, 0x16, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xeb, 0xe1, 0x9f, 0xf0, 0xeb,
	0xe1, 0xff, 0xf0, 0xeb, 0xe1, 0xff, 0xf0, 0xeb, 0xe1, 0xff, 0xf0, 0xeb,
	0xe1, 0xff, 0xf0, 0xeb, 0xe1, 0xff, 0xf0, 0xeb, 0xe1, 0xff, 0xef, 0xea,
	0xe0, 0xff, 0xcd, 0xc3, 0xb2, 0xff, 0x83, 0x69, 0x2e, 0xff, 0x7d, 0x60,
	0x09, 0xff, 0x7d, 0x60, 0x09, 0xff, 0x7d, 0x60, 0x09, 0xff, 0x7d, 0x60,
	0x09, 0xff, 0x75, 0x5a, 0x08, 0xff, 0x60, 0x49, 0x07, 0xff, 0x5e, 0x48,
	0x07, 0xff, 0x5e, 0x48, 0x07, 0xff, 0x5e, 0x48, 0x07, 0xff, 0x5e, 0x48,
	0x09, 0xff, 0x86, 0x79, 0x5d, 0xff, 0xdc, 0xd6, 0xc2, 0xff, 0xe6, 0xe1,
	0xcd, 0xff, 0xe6, 0xe1, 0xcd, 0xff, 0xe6, 0xe1, 0xcd, 0xff, 0xe6, 0xe1,
	0xcd, 0xff, 0xe6, 0xe1, 0xcd, 0xff, 0xe6, 0xe1, 0xcd, 0xff, 0xe6, 0xe1,
	0xcd, 0xf1, 0xe6, 0xe1, 0xcd, 0x3c, 0x14, 0x13, 0x11, 0x00, 0x00, 0x00,
	0x00, 0x00, 0xf0, 0xeb, 0xe1, 0xd0, 0xf0, 0xeb, 0xe1, 0xff, 0xf0, 0xeb,
	0xe1, 0xff, 0xf0, 0xeb, 0xe1, 0xff, 0xf0, 0xeb, 0xe1, 0xff, 0xf0, 0xeb,
	0xe1, 0xff, 0xf0, 0xeb, 0xe1, 0xff, 0xeb, 0xe6, 0xdb, 0xff, 0xa4, 0x93,
	0x75, 0xff, 0x7d, 0x60, 0x0a, 0xff, 0x7d, 0x60, 0x09, 0xff, 0x7d, 0x60,
	0x09, 0xff, 0x7d, 0x60, 0x09, 0xff, 0x7d, 0x60, 0x09, 0xfc, 0x76, 0x5a,
	0x08, 0xf0, 0x60, 0x49, 0x07, 0xf5, 0x5e, 0x48, 0x07, 0xff, 0x5e, 0x48,
	0x07, 0xff, 0x5e, 0x48, 0x07, 0xff, 0x5e, 0x48, 0x07, 0xff, 0x65, 0x51,
	0x23, 0xff, 0xc0, 0xb9, 0xa3, 0xff, 0xe6, 0xe1, 0xcd, 0xff, 0xe6, 0xe1,
	0xcd, 0xff, 0xe6, 0xe1, 0xcd, 0xff, 0xe6, 0xe1, 0xcd, 0xff, 0xe6, 0xe1,
	0xcd, 0xff, 0xe6, 0xe1, 0xcd, 0xff, 0xe6, 0xe1, 0xcd, 0xf9, 0xe6, 0xe1,
	0xcd, 0x64, 0xe5, 0xe0, 0xcc, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xeb,
	0xe1, 0xf1, 0xf0, 0xeb, 0xe1, 0xff, 0xf0, 0xeb, 0xe1, 0xff, 0xf0, 0xeb,
	0xe1, 0xff, 0xf0, 0xeb, 0xe1, 0xff, 0xf0, 0xeb, 0xe1, 0xff, 0xf0, 0xeb,
	0xe1, 0xff, 0xe3, 0xdc, 0xcf, 0xff, 0x8c, 0x74, 0x45, 0xff, 0x7d, 0x60,
	0x09, 0xff, 0x7d, 0x60, 0x09, 0xff, 0x7d, 0x60, 0x09, 0xff, 0x7d, 0x60,
	0x09, 0xfc, 0x7d, 0x60, 0x09, 0xa6, 0x77, 0x5b, 0x09, 0x38, 0x5f, 0x49,
	0x07, 0x59, 0x5e, 0x48, 0x07, 0xe0, 0x5e, 0x48, 0x07, 0xff, 0x5e, 0x48,
	0x07, 0xff, 0x5e, 0x48, 0x07, 0xff, 0x5e, 0x48, 0x09, 0xff, 0xa5, 0x9b,
	0x84, 0xff, 0xe4, 0xdf, 0xcb, 0xff, 0xe6, 0xe1, 0xcd, 0xff, 0xe6, 0xe1,
	0xcd, 0xff, 0xe6, 0xe1, 0xcd, 0xff, 0xe6, 0xe1, 0xcd, 0xff, 0xe6, 0xe1,
	0xcd, 0xff, 0xe6, 0xe1, 0xcd, 0xfd, 0xe6, 0xe1, 0xcd, 0x7e, 0xe6, 0xe1,
	0xce, 0x01, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xeb, 0xe1, 0xfd, 0xf0, 0xeb,
	0xe1, 0xff, 0xf0, 0xeb, 0xe1, 0xff, 0xf0, 0xeb, 0xe1, 0xff, 0xf0, 0xeb,
	0xe1, 0xff, 0xf0, 0xeb, 0xe1, 0xff, 0xf0, 0xeb, 0xe1, 0xff, 0xdb, 0xd4,
	0xc5, 0xff, 0x86, 0x6d, 0x38, 0xff, 0x7d, 0x60, 0x09, 0xff, 0x7d, 0x60,
	0x09, 0xff, 0x7d, 0x60, 0x09, 0xff, 0x7d, 0x60, 0x09, 0xef, 0x7d, 0x60,
	0x09, 0x35, 0x7b, 0x5f, 0x09, 0x00, 0x5f, 0x49, 0x07, 0x05, 0x5e, 0x48,
	0x07, 0x94, 0x5e, 0x48, 0x07, 0xff, 0x5e, 0x48, 0x07, 0xff, 0x5e, 0x48,
	0x07, 0xff, 0x5e, 0x48, 0x07, 0xff, 0x97, 0x8c, 0x73, 0xff, 0xe2, 0xdd,
	0xc9, 0xff, 0xe6, 0xe1, 0xcd, 0xff, 0xe1, 0xdb, 0xcd, 0xff, 0xcc, 0xc4,
	0xca, 0xff, 0xc8, 0xc0, 0xca, 0xff, 0xc8, 0xc0, 0xca, 0xff, 0xc8, 0xc0,
	0xca, 0xff, 0xb8, 0xae, 0xc9, 0xaa, 0x51, 0x25, 0xc3, 0x49, 0x48, 0x00,
	0xc3, 0x2c, 0xf0, 0xeb, 0xe1, 0xfa, 0xf0, 0xeb, 0xe1, 0xff, 0xf0, 0xeb,
	0xe1, 0xff, 0xf0, 0xeb, 0xe1, 0xff, 0xf0, 0xeb, 0xe1, 0xff, 0xf0, 0xeb,
	0xe1, 0xff, 0xf0, 0xeb, 0xe1, 0xff, 0xdd, 0xd6, 0xc8, 0xff, 0x87, 0x6f,
	0x3b, 0xff, 0x7d, 0x60, 0x09, 0xff, 0x7d, 0x60, 0x09, 0xff, 0x7d, 0x60,
	0x09, 0xff, 0x7d, 0x60, 0x09, 0xf4, 0x7d, 0x60, 0x09, 0x53, 0x79, 0x5d,
	0x09, 0x04, 0x5e, 0x48, 0x07, 0x11, 0x5e, 0x48, 0x07, 0xae, 0x5e, 0x48,
	0x07, 0xff, 0x5e, 0x48, 0x07, 0xff, 0x5e, 0x48, 0x07, 0xff, 0x5e, 0x48,
	0x07, 0xff, 0x9b, 0x91, 0x78, 0xff, 0xe3, 0xde, 0xc9, 0xff, 0xe6, 0xe1,
	0xcd, 0xff, 0xbc, 0xb2, 0xc9, 0xff, 0x5d, 0x3c, 0xc4, 0xff, 0x57, 0x30,
	0xc3, 0xff, 0x57, 0x30, 0xc3, 0xff, 0x57, 0x30, 0xc3, 0xff, 0x51, 0x23,
	0xc3, 0xfa, 0x48, 0x01, 0xc3, 0xf4, 0x48, 0x00, 0xc3, 0xdf, 0xf0, 0xeb,
	0xe1, 0xe5, 0xf0, 0xeb, 0xe1, 0xff, 0xf0, 0xeb, 0xe1, 0xff, 0xf0, 0xeb,
	0xe1, 0xff, 0xf0, 0xeb, 0xe1, 0xff, 0xf0, 0xeb, 0xe1, 0xff, 0xf0, 0xeb,
	0xe1, 0xff, 0xe7, 0xe1, 0xd5, 0xff, 0x92, 0x7d, 0x55, 0xff, 0x7d, 0x60,
	0x09, 0xff, 0x7d, 0x60, 0x09, 0xff, 0x7d, 0x60, 0x09, 0xff, 0x7d, 0x60,
	0x09, 0xfe, 0x7d, 0x60, 0x09, 0xdc, 0x76, 0x5b, 0x08, 0x8f, 0x5f, 0x49,
	0x07, 0xab, 0x5e, 0x48, 0x07, 0xf6, 0x5e, 0x48, 0x07, 0xff, 0x5e, 0x48,
	0x07, 0xff, 0x5e, 0x48, 0x07, 0xff, 0x60, 0x4a, 0x10, 0xff, 0xaf, 0xa6,
	0x8f, 0xff, 0xe5, 0xe0, 0xcc, 0xff, 0xe5, 0xdf, 0xcd, 0xff, 0xa5, 0x98,
	0xc7, 0xff, 0x49, 0x04, 0xc3, 0xff, 0x48, 0x00, 0xc3, 0xff, 0x48, 0x00,
	0xc3, 0xff, 0x48, 0x00, 0xc3, 0xff, 0x48, 0x00, 0xc3, 0xff, 0x48, 0x00,
	0xc3, 0xff, 0x48, 0x00, 0xc3, 0xf0, 0xf0, 0xeb, 0xe1, 0xbe, 0xf0, 0xeb,
	0xe1, 0xff, 0xf0, 0xeb, 0xe1, 0xff, 0xf0, 0xeb, 0xe1, 0xff, 0xf0, 0xeb,
	0xe1, 0xff, 0xf0, 0xeb, 0xe1, 0xff, 0xf0, 0xeb, 0xe1, 0xff, 0xee, 0xe8,
	0xde, 0xff, 0xb4, 0xa7, 0x8f, 0xff, 0x7e, 0x61, 0x11, 0xff, 0x7d, 0x60,
	0x09, 0xff, 0x7d, 0x60, 0x09, 0xff, 0x7d, 0x60, 0x09, 0xff, 0x7d, 0x60,
	0x09, 0xff, 0x75, 0x5a, 0x08, 0xfe, 0x60, 0x49, 0x07, 0xff, 0x5e, 0x48,
	0x07, 0xff, 0x5e, 0x48, 0x07, 0xff, 0x5e, 0x48, 0x07, 0xff, 0x5e, 0x48,
	0x07, 0xff, 0x6d, 0x5b, 0x36, 0xff, 0xcd, 0xc6, 0xb1, 0xff, 0xe6, 0xe1,
	0xcd, 0xff, 0xe0, 0xdb, 0xcd, 0xff, 0x87, 0x74, 0xc6, 0xff, 0x48, 0x00,
	0xc3, 0xff, 0x48, 0x00, 0xc3, 0xff, 0x48, 0x00, 0xc3, 0xff, 0x48, 0x00,
	0xc3, 0xff, 0x48, 0x00, 0xc3, 0xff, 0x48, 0x00, 0xc3, 0xff, 0x48, 0x00,
	0xc3, 0xce, 0xf0, 0xeb, 0xe1, 0x87, 0xf0, 0xeb, 0xe1, 0xfd, 0xf0, 0xeb,
	0xe1, 0xff, 0xf0, 0xeb, 0xe1, 0xff, 0xf0, 0xeb, 0xe1, 0xff, 0xf0, 0xeb,
	0xe1, 0xff, 0xf0, 0xeb, 0xe1, 0xff, 0xf0, 0xeb, 0xe1, 0xff, 0xdd, 0xd5,
	0xc8, 0xff, 0x8f, 0x79, 0x4e, 0xff, 0x7d, 0x60, 0x0a, 0xff, 0x7d, 0x60,
	0x09, 0xff, 0x7d, 0x60, 0x09, 0xff, 0x7d, 0x60, 0x09, 0xff, 0x75, 0x5a,
	0x08, 0xff, 0x60, 0x49, 0x07, 0xff, 0x5e, 0x48, 0x07, 0xff, 0x5e, 0x48,
	0x07, 0xff, 0x5e, 0x48, 0x07, 0xff, 0x60, 0x4b, 0x13, 0xff, 0xa1, 0x97,
	0x7f, 0xff, 0xe2, 0xdd, 0xc9, 0xff, 0xe6, 0xe1, 0xcd, 0xff, 0xcf, 0xc7,
	0xcb, 0xff, 0x5f, 0x3e, 0xc4, 0xff, 0x48, 0x00, 0xc3, 0xff, 0x48, 0x00,
	0xc3, 0xff, 0x48, 0x00, 0xc3, 0xff, 0x48, 0x00, 0xc3, 0xff, 0x48, 0x00,
	0xc3, 0xff, 0x48, 0x00, 0xc3, 0xff, 0x48, 0x00, 0xc3, 0x9e, 0xf0, 0xeb,
	0xe1, 0x46, 0xf0, 0xeb, 0xe1, 0xf2, 0xf0, 0xeb, 0xe1, 0xff, 0xf0, 0xeb,
	0xe1, 0xff, 0xf0, 0xeb, 0xe1, 0xff, 0xf0, 0xeb, 0xe1, 0xff, 0xf0, 0xeb,
	0xe1, 0xff, 0xf0, 0xeb, 0xe1, 0xff, 0xef, 0xe9, 0xdf, 0xff, 0xcc, 0xc2,
	0xb1, 0xff, 0x8a, 0x71, 0x40, 0xff, 0x7d, 0x60, 0x0b, 0xff, 0x7d, 0x60,
	0x09, 0xff, 0x7d, 0x60, 0x09, 0xff, 0x75, 0x5a, 0x08, 0xff, 0x60, 0x49,
	0x07, 0xff, 0x5e, 0x48, 0x07, 0xff, 0x5e, 0x48, 0x07, 0xff, 0x60, 0x4b,
	0x13, 0xff, 0x8e, 0x82, 0x68, 0xff, 0xd8, 0xd2, 0xbe, 0xff, 0xe6, 0xe1,
	0xcd, 0xff, 0xe3, 0xdd, 0xcd, 0xff, 0xa0, 0x92, 0xc7, 0xff, 0x4b, 0x0e,
	0xc3, 0xff, 0x48, 0x00, 0xc3, 0xff, 0x48, 0x00, 0xc3, 0xff, 0x48, 0x00,
	0xc3, 0xff, 0x48, 0x00, 0xc3, 0xff, 0x48, 0x00, 0xc3, 0xff, 0x48, 0x00,
	0xc3, 0xf9, 0x48, 0x00, 0xc3, 0x63, 0xf0, 0xeb, 0xe1, 0x12, 0xf0, 0xeb,
	0xe1, 0xc5, 0xf0, 0xeb, 0xe1, 0xff, 0xf0, 0xeb, 0xe1, 0xff, 0xf0, 0xeb,
	0xe1, 0xff, 0xf0, 0xeb, 0xe1, 0xff, 0xf0, 0xeb, 0xe1, 0xff, 0xf0, 0xeb,
	0xe1, 0xff, 0xf0, 0xeb, 0xe1, 0xff, 0xee, 0xe9, 0xde, 0xff, 0xd1, 0xc8,
	0xb8, 0xff, 0x9a, 0x87, 0x64, 0xff, 0x81, 0x66, 0x25, 0xff, 0x7d, 0x60,
	0x0b, 0xff, 0x75, 0x5a, 0x08, 0xff, 0x60, 0x49, 0x07, 0xff, 0x5f, 0x4a,
	0x0f, 0xff, 0x6c, 0x5b, 0x35, 0xff, 0xa0, 0x96, 0x7e, 0xff, 0xd8, 0xd2,
	0xbe, 0xff, 0xe6, 0xe1, 0xcd, 0xff, 0xe5, 0xe0, 0xcd, 0xff, 0xc4, 0xbc,
	0xca, 0xff, 0x5e, 0x3d, 0xc4, 0xff, 0x48, 0x00, 0xc3, 0xff, 0x48, 0x00,
	0xc3, 0xff, 0x48, 0x00, 0xc3, 0xff, 0x48, 0x00, 0xc3, 0xff, 0x48, 0x00,
	0xc3, 0xff, 0x48, 0x00, 0xc3, 0xff, 0x48, 0x00, 0xc3, 0xe4, 0x48, 0x00,
	0xc3, 0x27, 0xf0, 0xeb, 0xe1, 0x02, 0xf0, 0xeb, 0xe1, 0x67, 0xf0, 0xeb,
	0xe1, 0xf7, 0xf0, 0xeb, 0xe1, 0xff, 0xf0, 0xeb, 0xe1, 0xff, 0xf0, 0xeb,
	0xe1, 0xff, 0xf0, 0xeb, 0xe1, 0xff, 0xf0, 0xeb, 0xe1, 0xff, 0xf0, 0xeb,
	0xe1, 0xff, 0xf0, 0xeb, 0xe1, 0xff, 0xef, 0xea, 0xe0, 0xff, 0xe6, 0xe0,
	0xd4, 0xff, 0xcc, 0xc2, 0xb1, 0xff, 0xb4, 0xa6, 0x8f, 0xff, 0xa3, 0x95,
	0x7a, 0xff, 0x9a, 0x8f, 0x76, 0xff, 0xad, 0xa5, 0x8e, 0xff, 0xcc, 0xc6,
	0xb0, 0xff, 0xe2, 0xdd, 0xc8, 0xff, 0xe6, 0xe1, 0xcd, 0xff, 0xe5, 0xe0,
	0xcd, 0xff, 0xce, 0xc6, 0xcb, 0xff, 0x74, 0x5c, 0xc5, 0xff, 0x49, 0x03,
	0xc3, 0xff, 0x48, 0x00, 0xc3, 0xff, 0x48, 0x00, 0xc3, 0xff, 0x48, 0x00,
	0xc3, 0xff, 0x48, 0x00, 0xc3, 0xff, 0x48, 0x00, 0xc3, 0xff, 0x48, 0x00,
	0xc3, 0xfe, 0x48, 0x00, 0xc3, 0xa1, 0x48, 0x00, 0xc3, 0x08, 0x12, 0x11,
	0x10, 0x00, 0xf0, 0xeb, 0xe1, 0x15, 0xf0, 0xeb, 0xe1, 0xbd, 0xf0, 0xeb,
	0xe1, 0xfe, 0xf0, 0xeb, 0xe1, 0xff, 0xf0, 0xeb, 0xe1, 0xff, 0xf0, 0xeb,
	0xe1, 0xff, 0xf0, 0xeb, 0xe1, 0xff, 0xf0, 0xeb, 0xe1, 0xff, 0xf0, 0xeb,
	0xe1, 0xff, 0xf0, 0xeb, 0xe1, 0xff, 0xf0, 0xeb, 0xe1, 0xff, 0xf0, 0xeb,
	0xe1, 0xff, 0xee, 0xe9, 0xde, 0xff, 0xea, 0xe4, 0xd7, 0xff, 0xe3, 0xde,
	0xca, 0xff, 0xe5, 0xe0, 0xcc, 0xff, 0xe6, 0xe1, 0xcd, 0xff, 0xe6, 0xe1,
	0xcd, 0xff, 0xe3, 0xdd, 0xcd, 0xff, 0xc4, 0xbb, 0xca, 0xff, 0x73, 0x5c,
	0xc5, 0xff, 0x49, 0x06, 0xc3, 0xff, 0x48, 0x00, 0xc3, 0xff, 0x48, 0x00,
	0xc3, 0xff, 0x48, 0x00, 0xc3, 0xff, 0x48, 0x00, 0xc3, 0xff, 0x48, 0x00,
	0xc3, 0xff, 0x48, 0x00, 0xc3, 0xff, 0x48, 0x00, 0xc3, 0xee, 0x48, 0x00,
	0xc3, 0x44, 0x48, 0x00, 0xc2, 0x00, 0x00, 0x00, 0x00, 0x00, 0xef, 0xeb,
	0xe1, 0x01, 0xf0, 0xeb, 0xe1, 0x40, 0xf0, 0xeb, 0xe1, 0xe3, 0xf0, 0xeb,
	0xe1, 0xff, 0xf0, 0xeb, 0xe1, 0xff, 0xf0, 0xeb, 0xe1, 0xff, 0xf0, 0xeb,
	0xe1, 0xff, 0xf0, 0xeb, 0xe1, 0xff, 0xf0, 0xeb, 0xe1, 0xff, 0xf0, 0xeb,
	0xe1, 0xff, 0xf0, 0xeb, 0xe1, 0xff, 0xf0, 0xeb, 0xe1, 0xff, 0xf0, 0xeb,
	0xe1, 0xff, 0xee, 0xe9, 0xdc, 0xff, 0xe6, 0xe1, 0xce, 0xff, 0xe4, 0xdf,
	0xcd, 0xff, 0xe0, 0xdb, 0xcc, 0xff, 0xce, 0xc7, 0xcb, 0xff, 0x9e, 0x91,
	0xc7, 0xff, 0x5d, 0x3c, 0xc4, 0xff, 0x48, 0x03, 0xc3, 0xff, 0x48, 0x00,
	0xc3, 0xff, 0x48, 0x00, 0xc3, 0xff, 0x48, 0x00, 0xc3, 0xff, 0x48, 0x00,
	0xc3, 0xff, 0x48, 0x00, 0xc3, 0xff, 0x48, 0x00, 0xc3, 0xff, 0x48, 0x00,
	0xc3, 0xfd, 0x48, 0x00, 0xc3, 0x9f, 0x48, 0x00, 0xc3, 0x0a, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xeb,
	0xe1, 0x04, 0xf0, 0xeb, 0xe1, 0x64, 0xf0, 0xeb, 0xe1, 0xee, 0xf0, 0xeb,
	0xe1, 0xff, 0xf0, 0xeb, 0xe1, 0xff, 0xf0, 0xeb, 0xe1, 0xff, 0xf0, 0xeb,
	0xe1, 0xff, 0xf0, 0xeb, 0xe1, 0xff, 0xf0, 0xeb, 0xe1, 0xff, 0xf0, 0xeb,
	0xe1, 0xff, 0xf0, 0xeb, 0xe1, 0xff, 0xf0, 0xeb, 0xe1, 0xff, 0xe9, 0xe3,
	0xdb, 0xff, 0xbb, 0xb1, 0xca, 0xff, 0xa4, 0x97, 0xc7, 0xff, 0x85, 0x72,
	0xc6, 0xff, 0x5e, 0x3d, 0xc4, 0xff, 0x4a, 0x0e, 0xc3, 0xff, 0x48, 0x00,
	0xc3, 0xff, 0x48, 0x00, 0xc3, 0xff, 0x48, 0x00, 0xc3, 0xff, 0x48, 0x00,
	0xc3, 0xff, 0x48, 0x00, 0xc3, 0xff, 0x48, 0x00, 0xc3, 0xff, 0x48, 0x00,
	0xc3, 0xff, 0x48, 0x00, 0xc3, 0xff, 0x48, 0x00, 0xc3, 0xd8, 0x48, 0x00,
	0xc3, 0x2c, 0x47, 0x00, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x11, 0x10, 0x00, 0xf0, 0xeb,
	0xe1, 0x08, 0xf0, 0xeb, 0xe1, 0x6d, 0xf0, 0xeb, 0xe1, 0xec, 0xf0, 0xeb,
	0xe1, 0xff, 0xf0, 0xeb, 0xe1, 0xff, 0xf0, 0xeb, 0xe1, 0xff, 0xf0, 0xeb,
	0xe1, 0xff, 0xf0, 0xeb, 0xe1, 0xff, 0xf0, 0xeb, 0xe1, 0xff, 0xf0, 0xeb,
	0xe1, 0xff, 0xf0, 0xeb, 0xe1, 0xff, 0xd5, 0xcd, 0xda, 0xff, 0x5f, 0x3e,
	0xc5, 0xff, 0x49, 0x03, 0xc3, 0xff, 0x48, 0x00, 0xc3, 0xff, 0x48, 0x00,
	0xc3, 0xff, 0x48, 0x00, 0xc3, 0xff, 0x48, 0x00, 0xc3, 0xff, 0x48, 0x00,
	0xc3, 0xff, 0x48, 0x00, 0xc3, 0xff, 0x48, 0x00, 0xc3, 0xff, 0x48, 0x00,
	0xc3, 0xff, 0x48, 0x00, 0xc3, 0xff, 0x48, 0x00, 0xc3, 0xff, 0x48, 0x00,
	0xc3, 0xed, 0x48, 0x00, 0xc3, 0x58, 0x48, 0x00, 0xc3, 0x02, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc4, 0xc0, 0xb8, 0x00, 0xf0, 0xeb,
	0xe1, 0x06, 0xf0, 0xeb, 0xe1, 0x57, 0xf0, 0xeb, 0xe1, 0xd8, 0xf0, 0xeb,
	0xe1, 0xfd, 0xf0, 0xeb, 0xe1, 0xff, 0xf0, 0xeb, 0xe1, 0xff, 0xf0, 0xeb,
	0xe1, 0xff, 0xf0, 0xeb, 0xe1, 0xff, 0xf0, 0xeb, 0xe1, 0xff, 0xf0, 0xeb,
	0xe1, 0xff, 0xd2, 0xca, 0xd9, 0xff, 0x59, 0x34, 0xc4, 0xff, 0x48, 0x00,
	0xc3, 0xff, 0x48, 0x00, 0xc3, 0xff, 0x48, 0x00, 0xc3, 0xff, 0x48, 0x00,
	0xc3, 0xff, 0x48, 0x00, 0xc3, 0xff, 0x48, 0x00, 0xc3, 0xff, 0x48, 0x00,
	0xc3, 0xff, 0x48, 0x00, 0xc3, 0xff, 0x48, 0x00, 0xc3, 0xff, 0x48, 0x00,
	0xc3, 0xff, 0x48, 0x00, 0xc3, 0xf1, 0x48, 0x00, 0xc3, 0x72, 0x48, 0x00,
	0xc3, 0x07, 0x01, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0f, 0x0e, 0x00, 0xf0, 0xeb,
	0xe1, 0x02, 0xf0, 0xeb, 0xe1, 0x2c, 0xf0, 0xeb, 0xe1, 0x9d, 0xf0, 0xeb,
	0xe1, 0xec, 0xf0, 0xeb, 0xe1, 0xfd, 0xf0, 0xeb, 0xe1, 0xff, 0xf0, 0xeb,
	0xe1, 0xff, 0xf0, 0xeb, 0xe1, 0xff, 0xf0, 0xeb, 0xe1, 0xff, 0xd2, 0xca,
	0xd9, 0xff, 0x59, 0x34, 0xc4, 0xff, 0x48, 0x00, 0xc3, 0xff, 0x48, 0x00,
	0xc3, 0xff, 0x48, 0x00, 0xc3, 0xff, 0x48, 0x00, 0xc3, 0xff, 0x48, 0x00,
	0xc3, 0xff, 0x48, 0x00, 0xc3, 0xff, 0x48, 0x00, 0xc3, 0xff, 0x48, 0x00,
	0xc3, 0xff, 0x48, 0x00, 0xc3, 0xff, 0x48, 0x00, 0xc3, 0xec, 0x48, 0x00,
	0xc3, 0x72, 0x48, 0x00, 0xc3, 0x09, 0x3a, 0x00, 0xa0, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xee, 0xe9,
	0xdf, 0x00, 0xf0, 0xeb, 0xe1, 0x09, 0xf0, 0xeb, 0xe1, 0x3c, 0xf0, 0xeb,
	0xe1, 0x92, 0xf0, 0xeb, 0xe1, 0xd6, 0xf0, 0xeb, 0xe1, 0xf2, 0xf0, 0xeb,
	0xe1, 0xfa, 0xf0, 0xeb, 0xe1, 0xfe, 0xd2, 0xca, 0xd9, 0xff, 0x59, 0x34,
	0xc4, 0xff, 0x48, 0x00, 0xc3, 0xff, 0x48, 0x00, 0xc3, 0xff, 0x48, 0x00,
	0xc3, 0xff, 0x48, 0x00, 0xc3, 0xff, 0x48, 0x00, 0xc3, 0xff, 0x48, 0x00,
	0xc3, 0xff, 0x48, 0x00, 0xc3, 0xff, 0x48, 0x00, 0xc3, 0xfd, 0x48, 0x00,
	0xc3, 0xd7, 0x48, 0x00, 0xc3, 0x57, 0x48, 0x00, 0xc3, 0x07, 0x3a, 0x00,
	0xa0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0xed, 0xe8, 0xde, 0x00, 0xf0, 0xeb, 0xe1, 0x05, 0xf0, 0xeb,
	0xe1, 0x18, 0xf0, 0xeb, 0xe1, 0x40, 0xf0, 0xeb, 0xe1, 0x68, 0xf0, 0xeb,
	0xe1, 0x82, 0xc2, 0xb9, 0xd6, 0xab, 0x52, 0x27, 0xc4, 0xfa, 0x48, 0x00,
	0xc3, 0xff, 0x48, 0x00, 0xc3, 0xff, 0x48, 0x00, 0xc3, 0xff, 0x48, 0x00,
	0xc3, 0xff, 0x48, 0x00, 0xc3, 0xff, 0x48, 0x00, 0xc3, 0xfe, 0x48, 0x00,
	0xc3, 0xed, 0x48, 0x00, 0xc3, 0x9e, 0x48, 0x00, 0xc3, 0x2c, 0x48, 0x00,
	0xc3, 0x02, 0x01, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc5, 0xc1,
	0xb9, 0x00, 0xef, 0xea, 0xe0, 0x00, 0xf0, 0xeb, 0xe1, 0x02, 0x55, 0x2c,
	0xc4, 0x45, 0x48, 0x02, 0xc3, 0xf3, 0x48, 0x00, 0xc3, 0xff, 0x48, 0x00,
	0xc3, 0xff, 0x48, 0x00, 0xc3, 0xfe, 0x48, 0x00, 0xc3, 0xf8, 0x48, 0x00,
	0xc3, 0xe3, 0x48, 0x00, 0xc3, 0x9f, 0x48, 0x00, 0xc3, 0x42, 0x48, 0x00,
	0xc3, 0x0a, 0x47, 0x00, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x48, 0x00, 0xc3, 0x28, 0x48, 0x00,
	0xc3, 0xda, 0x48, 0x00, 0xc3, 0xec, 0x48, 0x00, 0xc3, 0xca, 0x48, 0x00,
	0xc3, 0x9a, 0x48, 0x00, 0xc3, 0x61, 0x48, 0x00, 0xc3, 0x26, 0x48, 0x00,
	0xc3, 0x08, 0x48, 0x00, 0xc2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x03, 0xff, 0xfc, 0x00,
	0x00, 0xff, 0xf8, 0x00, 0x00, 0x7f, 0xf0, 0x00, 0x00, 0x3f, 0xe0, 0x00,
	0x00, 0x1f, 0xc0, 0x00, 0x00, 0x0f, 0x80, 0x00, 0x00, 0x0f, 0x80, 0x00,
	0x00, 0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00,
	0x00, 0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00,
	0x00, 0x01, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00,
	0x00, 0x01, 0x80, 0x00, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x03, 0xe0, 0x00,
	0x00, 0x03, 0xf0, 0x00, 0x00, 0x07, 0xf8, 0x00, 0x00, 0x0f, 0xfe, 0x00,
	0x00, 0x1f, 0xff, 0x80, 0x00, 0x3f, 0xff, 0xf8, 0x00, 0xff, 0xff, 0xfc,
	0x03, 0xff,
}
